<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java内存区域划分</title>
    <link href="/2020/05/16/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86/"/>
    <url>/2020/05/16/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>Java程序执行时是交给JVM执行的，所以我们在谈论Java内存区域划分的时候实际上指的是JVM内存区域划分。在讨论JVM内存区域划分之前先来看一下Java程序的具体执行流程。</p><p><img src="Java%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" srcset="/img/loading.gif" alt="alt"></p><p>如上图所示，首先Java源代码文件(.Java)文件会被Java编译器编译成字节码文件(.Class), 然后由JVM中的类加载器加载各个类的字节码文件，加载完毕后交由Java执行引擎执行， JVM会用一些空间来存储执行期间所用到的数据， 这些空间被称为Runtime Data Area(运行时数据区)， 也就是我们常说的JVM内存。</p><p>Java虚拟机在执行JAVA程序的时候回把它所管理的内存划分成为若干个不同的数据区。这些区域有各自的用途，以及创建销毁时间。具体的划分如下:</p><p><img src="%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" srcset="/img/loading.gif" alt="alt"></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器是一块很小的内存空间，它可以看做是当前所执行的字节码的行号指示器。由于Java的多线程是通过线程间轮流切换、分配处理器执行时间的方式来实现的，在任意一个时刻一个处理器只能执行一个线程的指令，为了线程切换后能恢复到正确的执行位置，每一个线程都需要一个独立的程序计数器。<br>如果线程执行的是一个Java方法，计数器记录的是正在执行的虚拟字节码的指令地址；如果正在执行的是本地方法(Native),这个计数器为空。此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemory的区域。</p><h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p>与程序计数器一样，Java虚拟机栈也是线程私有的，他的生命周期与线程相同。每个方法被执行的时候，Java虚拟机都会创建一个栈帧用于存储局部变量、操作数栈、动态连接、方法出口等信息。</p><p>局部变量表存放了编译期间可知的各种Java虚拟机基本数据类型、对象引用和returnAddress(指向一条字节码指令的地址)</p><p>这些数据类型在局部变量表中的存储空间以局部变量槽(Slot)来表示，其中64位的long和double类型的数据会占用两个Slot，其余的数据类型数据只会占用一个。局部变量表所需的内存空间在编译期间分配完成，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量表空间是确定的，在方法执行期间不会改变局部变量表的大小。</p><p>在《Java虚拟机规范》中规定了两类异常情况:如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverFlow异常；如果Java虚拟机栈容量可动态扩展，当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常。</p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈和虚拟机栈的作用是相似的，区别只是本地方法栈服务于本地(Native)方法。、</p><h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>Java堆是所有线程共享的一块区域，在虚拟机启动时创建。此区域的唯一目的就是存放Java对象实例。</p><p>Java堆是垃圾收集器管理的内存区域。由于现代垃圾回收器大部分是基于分代回收理论设计的，所以Java堆中经常会出现”新生代” “老年代” “永久代” “From Survivor空间” “TO Survivor空间”等名词。</p><p>所有线程共享的Java堆可以划分出多个线程私有的分配缓冲区，以提升对象分配的效率，Java堆细分的目的是为了更好的回收内存或者更快的分配内存，不会改变Java堆存储内容的共性。</p><p>现在主流Java虚拟机的堆内存都是可以扩展的，如果在Java堆中没有内存完成实例分配，并且堆也无法扩展时，Java将会抛出OutOfMemoryError异常。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区和Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。垃圾收集器行为在这个区域很少出现。这块区域的内存回收主要是针对常量池的回收和类型卸载。</p><p>根据《Java虚拟机规范》规定，如果方法区无法满足新的内存分配需求时，将会抛出OutOfMemoryError异常。</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池是方法区的一部分，Class文件中除了有类的版本、字段、方法、接口描述等信息，还有一项常量池表，用于存放编译期间产生的各种字面量和符号引用，这部分内容在类加载后存放到运行时常量池中。</p><hr><p><font size= 1>tips: 符号引用可以是任何形式的字面量，只要能无歧义的定位到目标即可。在编译时Java类并不知道所引用类的地址，只能用符号引用代替，在JVM加载类的过程中会把符号引用替换成为直接引用</font></p><hr><p>并非只有预置入Class文件中常量池的内容才可以进入运行实时常量池，运行期间也可以将新的常量放入常量池中，用的比较多的是String类的intern()方法。</p><p>既然运行时常量池是方法区的一部分，自然也受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。但是这一部分的内存也被频繁使用。</p><p>在JDK1.4中加入了NIO(New Input/Output)类，引入一种基于通道与缓冲区(Buffer)的IO方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。</p><p>本机直接内存的大小不会受到Java堆大小的限制，但是会受到本机总内存的限制，一般服务器管理者配置虚拟机参数时会根据实际需要去设置-Xmx等信息，但通常会忽略直接内存，从而导致动态扩展时出现OutOfMemoryError异常。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/04/20/hello-world/"/>
    <url>/2020/04/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
